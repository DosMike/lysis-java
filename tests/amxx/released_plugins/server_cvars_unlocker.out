new String:pluginName[88] = "Server Cvars Unlocker";
new String:pluginVersion[24] = "1.0.1";
new String:pluginAuhtor[36] = "Arkshine";
new OrpheuHook:handleHookReadMultiplayCvars;
new OrpheuHook:handleHookCVarSetFloat;
new currentPluginState;
new g_statevar_0; // Internal state variable for default automation


Float:operator/(_:,Float:)(oper1, Float:oper2)
{
	return floatdiv(float(oper1), oper2);
}

is_user_admin(id)
{
	new __flags = get_user_flags(id, 0);
	new var1;
	return __flags > 0 && !__flags & 33554432;
}

cmd_access(id, level, cid, num, bool:accesssilent)
{
	new has_access;
	new var1;
	if (is_dedicated_server())
	{
		var1 = 0;
	}
	else
	{
		var1 = 1;
	}
	if (var1 == id)
	{
		has_access = 1;
	}
	else
	{
		if (level == 16777216)
		{
			if (is_user_admin(id))
			{
				has_access = 1;
			}
		}
		if (level & get_user_flags(id, 0))
		{
			has_access = 1;
		}
		if (!level)
		{
			has_access = 1;
		}
	}
	if (has_access)
	{
		if (num > read_argc())
		{
			new hcmd[32];
			new hinfo[128];
			new hflag;
			get_concmd(cid, hcmd, 31, hflag, hinfo, 127, level, -1);
			console_print(id, "%L:  %s %s", id, "USAGE", hcmd, hinfo);
			return 0;
		}
		return 1;
	}
	if (!accesssilent)
	{
		console_print(id, "%L", id, "NO_ACC_COM");
	}
	return 0;
}

OrpheuFunction:OrpheuGetEngineFunction(memberName[], libFunctionName[])
{
	static OrpheuStruct:engineFunctions;
	if (!engineFunctions)
	{
		engineFunctions = OrpheuGetEngineFunctionsStruct();
	}
	return OrpheuCreateFunction(OrpheuGetStructMember(engineFunctions, memberName), libFunctionName, 132);
}

public plugin_precache()
{
	register_plugin(pluginName, pluginVersion, pluginAuhtor);
	register_cvar("server_cvars_unlocker", pluginVersion, 68, 0);
	register_concmd("scu_toggle", "ConsoleCommand_TogglePlugin", 2048, "<0|1> - Toggle plugin state", -1);
	set_cvar_num("sv_accelerate", 5);
	set_cvar_num("sv_stopspeed", 75);
	state disabled;
	TogglePluginState(0, 1);
	return 0;
}

public ConsoleCommand_TogglePlugin(player, level, cid)
{
	if (cmd_access(player, level, cid, 2, false))
	{
		new newPluginState[2];
		read_argv(1, newPluginState, 1);
		TogglePluginState(player, clamp(str_to_num(newPluginState), 0, 1));
	}
	return 1;
}

TogglePluginState(player, stateWanted)
{
	if (stateWanted == currentPluginState)
	{
		new var1;
		if (stateWanted)
		{
			var1 = 796;
		}
		else
		{
			var1 = 892;
		}
		console_print(player, "\n[%s] %s", pluginName, var1);
	}
	else
	{
		new var2;
		if (stateWanted)
		{
			var2 = 1032;
		}
		else
		{
			var2 = 1124;
		}
		console_print(player, "\n[%s] %s", pluginName, var2);
	}
	new var3 = stateWanted;
	currentPluginState = var3;
	switch (var3)
	{
		case 0:
		{
			DisablePlugin();
		}
		case 1:
		{
			EnablePlugin();
		}
		default:
		{
		}
	}
	return 0;
}

public plugin_end()
{
	TogglePluginState(0, 0);
	return 0;
}

public OrpheuHookReturn:ReadMultiplayCvars(handleGameRules)
{
	server_print("\n[%s] Reading/setting multiplay cvars...\n", pluginName);
	new cvarsName[4][] = {
		{
			109, ...
		},
		{
			109, ...
		},
		{
			109, ...
		},
		{
			109, ...
		}
	};
	static cvarsHandle[4];
	static bool:cvarsHandleRetrieved;
	if (!cvarsHandleRetrieved)
	{
		new i;
		while (i < 4)
		{
			cvarsHandle[i] = get_cvar_pointer(cvarsName[i]);
			i++;
		}
		cvarsHandleRetrieved = true;
	}
	new entriesIdentifiers[4][] = {
		{
			114, ...
		},
		{
			99, ...
		},
		{
			102, ...
		},
		{
			108, ...
		}
	};
	new any:entriesNewValues[4][3] = {
		{
			0, 2147483583, 1114636288
		},
		{
			0, 2147483583, 1065353216
		},
		{
			0, 2147483583, 1065353216
		},
		{
			0, 31, 1065353216
		}
	};
	new cvar;
	new bool:shouldSetCvar;
	new value;
	while (cvar < 4)
	{
		value = ClampOOB(floatround(floatmul(get_pcvar_float(cvarsHandle[cvar]), entriesNewValues[cvar][2]), 0), entriesNewValues[cvar][0], entriesNewValues[cvar][1], shouldSetCvar);
		if (shouldSetCvar)
		{
			set_pcvar_float(cvarsHandle[cvar], value / entriesNewValues[cvar][2]);
		}
		OrpheuMemorySetAtAddress(handleGameRules, entriesIdentifiers[cvar], 1, value);
		server_print("\x09[OK] %s %.1f", cvarsName[cvar], value / entriesNewValues[cvar][2]);
		cvar++;
	}
	server_print("\n\x09* All multiplay cvars set properly.\n");
	return OrpheuHookReturn:2;
}

public OrpheuHookReturn:CVarSetFloat(varName[], Float:value)
{
	new cvarsServerName[3][] = {
		{
			115, ...
		},
		{
			115, ...
		},
		{
			115, ...
		}
	};
	static bool:cvarsHandleRetrieved;
	static Trie:handleTrieServerCvars;
	if (!cvarsHandleRetrieved)
	{
		handleTrieServerCvars = TrieCreate();
		new i;
		while (i < 3)
		{
			TrieSetCell(handleTrieServerCvars, cvarsServerName[i], 1);
			i++;
		}
		cvarsHandleRetrieved = true;
	}
	new var1;
	if (TrieKeyExists(handleTrieServerCvars, varName))
	{
		var1 = MissingTAG:2;
	}
	else
	{
		var1 = MissingTAG:0;
	}
	return var1;
}

TogglePatchMemory()
{
	if (currentPluginState == 1)
	{
		server_print("[%s] Applying multiplay cvars memory patches...\n", pluginName);
	}
	PatchMe(2992, 15, 0, 3172, 15, 0, 3344, 15 / 1114636288, float(0));
	PatchMe(3532, float(800), float(0), 3692, float(16000), float(2147483583), 3852, float(800), float(0), 4020, float(16000), float(2147483583), 4188, float(800), float(0), 4372, float(16000), float(2147483583), 4556, 800, 0, 4708, 16000, 2147483583, 4860, 800, 0, 5020, 16000, 2147483583, 5180, 800, 0, 5356, 16000, 2147483583, 5532, 16000, 2147483583, 5716, 16000, 2147483583, 5892, 16000, 2147483583, 6084, 16000, 2147483583, 6268, 16000, 2147483583, 6432, 16000, 2147483583, 6588, 16000, 2147483583, 6800, 16000, 2147483583);
	if (currentPluginState == 1)
	{
		server_print("[%s] Applying server cvars memory patches...\n", pluginName);
	}
	new bool:isLinuxServer = is_linux_server();
	new var1;
	if (isLinuxServer)
	{
		var1 = 10;
	}
	else
	{
		var1 = 14;
	}
	new var2;
	if (isLinuxServer)
	{
		var2 = 202;
	}
	else
	{
		var2 = 115;
	}
	NopMe(var2, 7188, 7400, var1, 7584, 7788);
	return 0;
}

PatchMe()
{
	new data[66];
	new rowCount = numargs() / 3;
	new offsetsPatched;
	new i;
	new c;
	new j;
	new row;
	while (i < rowCount)
	{
		row = i * 3;
		while ((c = getarg(row, j)))
		{
			j++;
			data[j] = c;
		}
		j++;
		data[j] = 0;
		data[64] = getarg(row + 1, 0);
		data[65] = getarg(row + 2, 0);
		if (currentPluginState == 1)
		{
			if (OrpheuMemorySet(data, 1, data[65]))
			{
				server_print("\x09[OK] %s", data);
				offsetsPatched++;
			}
			else
			{
				server_print("\x09[NOT FOUND] %s", data);
			}
		}
		else
		{
			OrpheuMemorySet(data, 1, data[64]);
		}
		j = 0;
		i++;
	}
	if (currentPluginState == 1)
	{
		server_print("\n\x09* Total Patches : %d/%d\n", offsetsPatched, rowCount);
	}
	return 0;
}

NopMe()
{
	new data[129];
	new rowCount = numargs() / 3;
	static Array:handleArrayIndex;
	new Array:handleArrayBytesToPatch;
	new Array:handleArrayBackupBytes;
	if (!handleArrayIndex)
	{
		new var1 = ArrayCreate(1, 32);
		handleArrayIndex = var1;
		FillDynamicArray(var1, rowCount, any:0);
	}
	new i;
	new c;
	new j;
	new k;
	new row;
	new startAddress;
	new currentAddress;
	while (i < rowCount)
	{
		row = i * 3;
		data[0] = getarg(row, 0);
		while ((c = getarg(row + 1, j)))
		{
			j++;
			data[1][j] = c;
		}
		j++;
		data[1][j] = 0;
		j = 0;
		while ((c = getarg(row + 2, j)))
		{
			j++;
			data[65][j] = c;
		}
		j++;
		data[65][j] = 0;
		j = 0;
		new var2 = ArrayCreate(1, 32);
		handleArrayBytesToPatch = var2;
		FillDynamicArray(var2, data[0], any:144);
		OrpheuMemoryGet(data[1], startAddress);
		currentAddress = startAddress;
		if (!((handleArrayBackupBytes = ArrayGetCell(handleArrayIndex, i))))
		{
			new var3 = ArrayCreate(1, 32);
			handleArrayBackupBytes = var3;
			ArraySetCell(handleArrayIndex, i, var3);
			k = 0;
			while (data[0] > k)
			{
				ArrayPushCell(handleArrayBackupBytes, OrpheuMemoryGetAtAddress(currentAddress, data[65], currentAddress));
				currentAddress++;
				k++;
			}
		}
		currentAddress = startAddress;
		if (!currentPluginState)
		{
			k = 0;
			while (data[0] > k)
			{
				ArraySetCell(handleArrayBytesToPatch, k, ArrayGetCell(handleArrayBackupBytes, k));
				k++;
			}
		}
		k = 0;
		while (data[0] > k)
		{
			OrpheuMemorySetAtAddress(currentAddress, data[65], 1, ArrayGetCell(handleArrayBytesToPatch, k), currentAddress);
			currentAddress++;
			k++;
		}
		if (currentPluginState == 1)
		{
			server_print("\x09* %d bytes were nopped successful.", data);
			ArrayDestroy(handleArrayBytesToPatch);
		}
		i++;
	}
	if (!currentPluginState)
	{
		ArrayDestroyAll(handleArrayIndex);
	}
	return 0;
}

ArrayDestroyAll(&Array:handleArray)
{
	new size = ArraySize(handleArray);
	new Array:handleSubArray;
	new i;
	while (i < size)
	{
		handleSubArray = ArrayGetCell(handleArray, i);
		ArrayDestroy(handleSubArray);
		i++;
	}
	ArrayDestroy(handleArray);
	return 0;
}

FillDynamicArray(Array:handleArray, size, any:value)
{
	new i;
	while (i < size)
	{
		ArrayPushCell(handleArray, value);
		i++;
	}
	return 0;
}

ClampOOB(value, minimum, maximum, &bool:wasOOB)
{
	wasOOB = 0;
	if (value < minimum)
	{
		value = minimum;
		wasOOB = 1;
	}
	else
	{
		if (value > maximum)
		{
			value = maximum;
			wasOOB = 1;
		}
	}
	return value;
}

DisablePlugin() <>
{
	return 0;
}

DisablePlugin() <enabled>
{
	OrpheuUnregisterHook(handleHookReadMultiplayCvars);
	OrpheuUnregisterHook(handleHookCVarSetFloat);
	TogglePatchMemory();
	state disabled;
	return 0;
}

EnablePlugin() <>
{
	return 0;
}

EnablePlugin() <disabled>
{
	handleHookReadMultiplayCvars = OrpheuRegisterHook(OrpheuGetFunction("ReadMultiplayCvars", 1300), "ReadMultiplayCvars", 0);
	handleHookCVarSetFloat = OrpheuRegisterHook(OrpheuGetEngineFunction("pfnCVarSetFloat", "CVarSetFloat"), "CVarSetFloat", 0);
	TogglePatchMemory();
	state enabled;
	return 0;
}

